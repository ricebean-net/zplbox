openapi: 3.0.3
info:
  title: ZplBox Print Server
  description: |-
    **ZPL Print Server**; Service to convert HTML or PDF or PNG content to ZPL.
  version: 1.0.0
servers:
  - url: http://localhost:8080/
tags:
  - name: Web Content
    description: Conversion of HTML based web content to ZPL.
  - name: PDF
    description: Conversion of PDF Documents to ZPL.
  - name: PNG
    description: Conversion of PNG images to ZPL.
  - name: ZPL
    description: Handling of ZPL Documents.
  - name: System
    description: System Endpoint.
paths:
  /v1/html2zpl:
    post:
      tags:
        - Web Content
      summary: Conversion of Web Content to ZPL.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HtmlRenderingParams'
      responses:
        '200':
          $ref: "#/components/responses/ZplLabelResponse"
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/html2zpl/print/{tcpAddress}:
    post:
      tags:
        - Web Content
      summary: Conversion of Web Content to ZPL and forward to a given TCP Address (ZPL Label Printer).
      parameters:
        - $ref: '#/components/parameters/TcpAddress'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HtmlRenderingParams'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/html2zpl/render:
    post:
      tags:
        - Web Content
      summary: Rendering of web content to a colored PNG.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HtmlRenderingParams'
      responses:
        '200':
          description: The rendered PNG image.
          content:
              application/png:
                schema: 
                  type: string
                  format: binary
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/pdf2zpl:
    post:
      tags:
        - PDF
      summary: Conversion of a PDF document to ZPL.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PdfRenderingParams'
      responses:
        '200':
          $ref: "#/components/responses/ZplLabelResponse"
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/pdf2zpl/print/{tcpAddress}:
    post:
      tags:
        - PDF
      summary: Conversion of a PDF document to ZPL and forward to a given TCP Address (ZPL Label Printer).
      parameters:
        - $ref: '#/components/parameters/TcpAddress'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PdfRenderingParams'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/pdf2zpl/render:
    post:
      tags:
        - PDF
      summary: Rendering of a PDF document to a colored PNG.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PdfRenderingParams'
      responses:
        '200':
          description: The rendered PNG image.
          content:
              application/png:
                schema: 
                  type: string
                  format: binary
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/png2zpl:
    post:
      tags:
        - PNG
      summary: Conversion of a PNG image to ZPL.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PngRenderingParams'
      responses:
        '200':
          $ref: "#/components/responses/ZplLabelResponse"
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/png2zpl/print/{tcpAddress}:
    post:
      tags:
        - PNG
      summary: Conversion of a PNG image to ZPL and forward to a given TCP Address (ZPL Label Printer).
      parameters:
        - $ref: '#/components/parameters/TcpAddress'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PngRenderingParams'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/zpl/print/{tcpAddress}:
    post:
      tags:
        - ZPL
      summary: Send ZPL to a given TCP Address (ZPL Label Printer).
      parameters:
        - $ref: '#/components/parameters/TcpAddress'
      requestBody:
        description: The raw ZPL string to send.
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: "^XA\n^FO50,50^A0N,30,30^FDHello World^FS\n^XZ"
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'

  /version:
    get:
      tags:
        - System
      summary: Version details.
      responses:
        '200':
          description: Version details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"

  /status:
    get:
      tags:
        - System
      summary: Status details.
      responses:
        '200':
          description: Status details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"

components:
  parameters:
    TcpAddress:
      in: path
      name: tcpAddress
      schema:
        type: string
      example: 127.0.0.1:9100
      required: true
      description: TCP Address of the destination where to send the ZPL File.
  responses:
    ZplLabelResponse:
      description: The ZPL Label
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ZplLabel'
    BadRequest:
      description: The request could not be understood by the server due to malformed syntax.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NoContent:
      description: No content.

  schemas:
    HtmlRenderingParams:
      type: object
      required: [widthPts, heightPts]
      properties:
        widthPts:
          type: integer
          description: The target rendered width of the ZPL label in points.
          example: 600
        heightPts:
          type: integer
          description: The target rendered width of the ZPL label in points.
          example: 800
        orientation:
          type: string
          enum: [ Rotate0, Rotate90, Rotate180, Rotate270 ]
          description: Rotation of the final ZPL label.
          default: Rotate0
      oneOf:
        - type: object
          description: Payload web page (HTML) is referenced by URL.
          required:
            - url
          properties:
            url:
              type: string
              description: The url of the web content to be rendered.
              example: https://zplbox.org/test-labels/test-label-1.html
        - type: object
          description: Payload web page (HTML) is encoded as base64.
          required:
            - dataBase64
          properties:
            dataBase64:
              type: string
              description: The Base64 encoded html file.
              example: PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc...

    PdfRenderingParams:
      type: object
      required: [dotsPerInch]
      properties:
        dotsPerInch:
          type: integer
          description: Resolution in dots per inch (dpi).
          example: 203
        orientation:
          type: string
          enum: [ Rotate0, Rotate90, Rotate180, Rotate270 ]
          description: Rotation of the final ZPL label.
          default: Rotate0
      oneOf:
      - type: object
        description: Payload PDF is referenced by URL.
        required:
          - url
        properties:
          url:
            type: string
            description: The url of the PDF content to be rendered.
            example: https://zplbox.org/test-labels/test-label-2.pdf
      - type: object
        description: Payload PDF is encoded as base64.
        required:
          - dataBase64
        properties:
          dataBase64:
            type: string
            description: The Base64 encoded PDF file.
            example: PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc...

    PngRenderingParams:
      type: object
      required: [dotsPerInch]
      properties:
        orientation:
          type: string
          enum: [ Rotate0, Rotate90, Rotate180, Rotate270 ]
          description: Rotation of the final ZPL label.
          default: Rotate0
      oneOf:
        - type: object
          description: Payload PNG is referenced by URL.
          required:
            - url
          properties:
            url:
              type: string
              description: The url of the PNG image to be rendered.
              example: https://zplbox.org/test-labels/test-label-3.png
        - type: object
          description: Payload PNG is encoded as base64.
          required:
            - dataBase64
          properties:
            dataBase64:
              type: string
              description: The Base64 encoded PNG file.
              example: PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc...

    ProblemDetails:
      type: object
      properties:
        status:
          type: integer
          example: 400
        title:
          type: string
          example: Unsupported Operation
        type:
          type: string
          example: type
        detail:
          type: string
          example: some more details

    Version:
      type: object
      properties:
        appName:
          type: string
          example: html2zpl
        appVersion:
          type: string
          example: 1.0.1
        commitId:
          type: string
          example: c51cc22b4873d280f95b4eff63bbfbdec431f42f

    Status:
      type: object
      properties:
        status:
          type: string
          description: Is always 'UP'.
          example: UP
        startTime:
          type: integer
          description: The service's start time in epoch millis
          example: 1724108519253
        startTimeReadable:
          type: string
          description: The start time in a human-readable format
          example: 2024-08-20T01:01:59.253+02:00[Europe/Berlin]
        duration:
          type: integer
          description: Relative start time in epoch millis
          example: 10100
        durationReadable:
          type: string
          description: Relative start time in a human-readable format
          example: 00h 00m 10s
        hostname:
          type: string
          description: The hosts name.
          example: host01
        version:
          $ref: "#/components/schemas/Version"

    ZplLabel:
      type: string
      example: |
        ^XA 
        ^FO0,0^GFA,60000,60000,75,FFF8C000180000003...
        ^XZ

        

